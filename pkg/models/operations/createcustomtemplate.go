// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"github.com/speakeasy-sdks/taamai/pkg/models/shared"
	"net/http"
)

type Data12 struct {
	CreatedAt    string         `json:"created_at"`
	Description  *string        `json:"description"`
	Fields       []shared.Field `json:"fields"`
	Group        string         `json:"group"`
	Icon         string         `json:"icon"`
	ID           int            `json:"id"`
	Name         string         `json:"name"`
	Package      string         `json:"package"`
	Professional bool           `json:"professional"`
	Prompt       string         `json:"prompt"`
	Slug         string         `json:"slug"`
	Status       bool           `json:"status"`
	TemplateCode string         `json:"template_code"`
	Tone         bool           `json:"tone"`
	UpdatedAt    string         `json:"updated_at"`
	UserID       string         `json:"user_id"`
}

func (o *Data12) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Data12) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Data12) GetFields() []shared.Field {
	if o == nil {
		return []shared.Field{}
	}
	return o.Fields
}

func (o *Data12) GetGroup() string {
	if o == nil {
		return ""
	}
	return o.Group
}

func (o *Data12) GetIcon() string {
	if o == nil {
		return ""
	}
	return o.Icon
}

func (o *Data12) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Data12) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Data12) GetPackage() string {
	if o == nil {
		return ""
	}
	return o.Package
}

func (o *Data12) GetProfessional() bool {
	if o == nil {
		return false
	}
	return o.Professional
}

func (o *Data12) GetPrompt() string {
	if o == nil {
		return ""
	}
	return o.Prompt
}

func (o *Data12) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Data12) GetStatus() bool {
	if o == nil {
		return false
	}
	return o.Status
}

func (o *Data12) GetTemplateCode() string {
	if o == nil {
		return ""
	}
	return o.TemplateCode
}

func (o *Data12) GetTone() bool {
	if o == nil {
		return false
	}
	return o.Tone
}

func (o *Data12) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Data12) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

// CreateCustomTemplateCreateCustomTemplate - OK
type CreateCustomTemplateCreateCustomTemplate struct {
	Code    string `json:"code"`
	Data    Data12 `json:"data"`
	Message string `json:"message"`
	Status  string `json:"status"`
}

func (o *CreateCustomTemplateCreateCustomTemplate) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateCustomTemplateCreateCustomTemplate) GetData() Data12 {
	if o == nil {
		return Data12{}
	}
	return o.Data
}

func (o *CreateCustomTemplateCreateCustomTemplate) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateCustomTemplateCreateCustomTemplate) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

type CreateCustomTemplateResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	CreateCustomTemplate *CreateCustomTemplateCreateCustomTemplate
	Headers              map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *CreateCustomTemplateResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateCustomTemplateResponse) GetCreateCustomTemplate() *CreateCustomTemplateCreateCustomTemplate {
	if o == nil {
		return nil
	}
	return o.CreateCustomTemplate
}

func (o *CreateCustomTemplateResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateCustomTemplateResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateCustomTemplateResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
