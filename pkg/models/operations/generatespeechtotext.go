// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

var GeneratespeechtotextServerList = []string{
	"http://127.0.0.1:8000/api",
}

type AudioFile struct {
	Content  []byte `multipartForm:"content"`
	FileName string `multipartForm:"name=audio_file"`
}

func (o *AudioFile) GetContent() []byte {
	if o == nil {
		return []byte{}
	}
	return o.Content
}

func (o *AudioFile) GetFileName() string {
	if o == nil {
		return ""
	}
	return o.FileName
}

type GeneratespeechtotextRequestBody struct {
	AudioFile        AudioFile `multipartForm:"file"`
	Document         string    `multipartForm:"name=document"`
	Language         string    `multipartForm:"name=language"`
	Task             string    `multipartForm:"name=task"`
	UserID           int       `multipartForm:"name=user_id"`
	WorkbookFolderID int       `multipartForm:"name=workbook_folder_id"`
	WorkbookID       int       `multipartForm:"name=workbook_id"`
}

func (o *GeneratespeechtotextRequestBody) GetAudioFile() AudioFile {
	if o == nil {
		return AudioFile{}
	}
	return o.AudioFile
}

func (o *GeneratespeechtotextRequestBody) GetDocument() string {
	if o == nil {
		return ""
	}
	return o.Document
}

func (o *GeneratespeechtotextRequestBody) GetLanguage() string {
	if o == nil {
		return ""
	}
	return o.Language
}

func (o *GeneratespeechtotextRequestBody) GetTask() string {
	if o == nil {
		return ""
	}
	return o.Task
}

func (o *GeneratespeechtotextRequestBody) GetUserID() int {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *GeneratespeechtotextRequestBody) GetWorkbookFolderID() int {
	if o == nil {
		return 0
	}
	return o.WorkbookFolderID
}

func (o *GeneratespeechtotextRequestBody) GetWorkbookID() int {
	if o == nil {
		return 0
	}
	return o.WorkbookID
}

// GeneratespeechtotextGeneratespeechtotext - OK
type GeneratespeechtotextGeneratespeechtotext struct {
	Current int    `json:"current"`
	ID      int    `json:"id"`
	Old     string `json:"old"`
	Status  string `json:"status"`
	Text    string `json:"text"`
	URL     string `json:"url"`
}

func (o *GeneratespeechtotextGeneratespeechtotext) GetCurrent() int {
	if o == nil {
		return 0
	}
	return o.Current
}

func (o *GeneratespeechtotextGeneratespeechtotext) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GeneratespeechtotextGeneratespeechtotext) GetOld() string {
	if o == nil {
		return ""
	}
	return o.Old
}

func (o *GeneratespeechtotextGeneratespeechtotext) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *GeneratespeechtotextGeneratespeechtotext) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

func (o *GeneratespeechtotextGeneratespeechtotext) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GeneratespeechtotextResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	Generatespeechtotext *GeneratespeechtotextGeneratespeechtotext
	Headers              map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GeneratespeechtotextResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GeneratespeechtotextResponse) GetGeneratespeechtotext() *GeneratespeechtotextGeneratespeechtotext {
	if o == nil {
		return nil
	}
	return o.Generatespeechtotext
}

func (o *GeneratespeechtotextResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GeneratespeechtotextResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GeneratespeechtotextResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
