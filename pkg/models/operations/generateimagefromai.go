// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"net/http"
)

var GenerateimagefromAIServerList = []string{
	"http://127.0.0.1:8000/api",
}

type GenerateimagefromAIRequest struct {
	MaxResults       int    `queryParam:"style=form,explode=true,name=max_results"`
	Name             string `queryParam:"style=form,explode=true,name=name"`
	Resolution       string `queryParam:"style=form,explode=true,name=resolution"`
	Title            string `queryParam:"style=form,explode=true,name=title"`
	UserID           int    `queryParam:"style=form,explode=true,name=user_id"`
	WorkbookFolderID int    `queryParam:"style=form,explode=true,name=workbook_folder_id"`
	WorkbookID       int    `queryParam:"style=form,explode=true,name=workbook_id"`
}

func (o *GenerateimagefromAIRequest) GetMaxResults() int {
	if o == nil {
		return 0
	}
	return o.MaxResults
}

func (o *GenerateimagefromAIRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GenerateimagefromAIRequest) GetResolution() string {
	if o == nil {
		return ""
	}
	return o.Resolution
}

func (o *GenerateimagefromAIRequest) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GenerateimagefromAIRequest) GetUserID() int {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *GenerateimagefromAIRequest) GetWorkbookFolderID() int {
	if o == nil {
		return 0
	}
	return o.WorkbookFolderID
}

func (o *GenerateimagefromAIRequest) GetWorkbookID() int {
	if o == nil {
		return 0
	}
	return o.WorkbookID
}

type GenerateimagefromAIGenerateimagefromAIData17 struct {
	CreatedAt        string `json:"created_at"`
	Description      string `json:"description"`
	ExpiresAt        string `json:"expires_at"`
	ID               int    `json:"id"`
	Image            string `json:"image"`
	ImageName        string `json:"image_name"`
	ImageURL         string `json:"image_url"`
	Name             string `json:"name"`
	PlanType         string `json:"plan_type"`
	Resolution       string `json:"resolution"`
	Storage          string `json:"storage"`
	UpdatedAt        string `json:"updated_at"`
	UserID           int    `json:"user_id"`
	WorkbookFolderID string `json:"workbook_folder_id"`
	WorkbookID       string `json:"workbook_id"`
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetExpiresAt() string {
	if o == nil {
		return ""
	}
	return o.ExpiresAt
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetImage() string {
	if o == nil {
		return ""
	}
	return o.Image
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetImageName() string {
	if o == nil {
		return ""
	}
	return o.ImageName
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetImageURL() string {
	if o == nil {
		return ""
	}
	return o.ImageURL
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetPlanType() string {
	if o == nil {
		return ""
	}
	return o.PlanType
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetResolution() string {
	if o == nil {
		return ""
	}
	return o.Resolution
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetStorage() string {
	if o == nil {
		return ""
	}
	return o.Storage
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetUserID() int {
	if o == nil {
		return 0
	}
	return o.UserID
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetWorkbookFolderID() string {
	if o == nil {
		return ""
	}
	return o.WorkbookFolderID
}

func (o *GenerateimagefromAIGenerateimagefromAIData17) GetWorkbookID() string {
	if o == nil {
		return ""
	}
	return o.WorkbookID
}

// GenerateimagefromAIGenerateimagefromAI - OK
type GenerateimagefromAIGenerateimagefromAI struct {
	Current int                                          `json:"current"`
	Data    GenerateimagefromAIGenerateimagefromAIData17 `json:"data"`
	Old     string                                       `json:"old"`
	Status  string                                       `json:"status"`
}

func (o *GenerateimagefromAIGenerateimagefromAI) GetCurrent() int {
	if o == nil {
		return 0
	}
	return o.Current
}

func (o *GenerateimagefromAIGenerateimagefromAI) GetData() GenerateimagefromAIGenerateimagefromAIData17 {
	if o == nil {
		return GenerateimagefromAIGenerateimagefromAIData17{}
	}
	return o.Data
}

func (o *GenerateimagefromAIGenerateimagefromAI) GetOld() string {
	if o == nil {
		return ""
	}
	return o.Old
}

func (o *GenerateimagefromAIGenerateimagefromAI) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

type GenerateimagefromAIResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// OK
	GenerateimagefromAI *GenerateimagefromAIGenerateimagefromAI
	Headers             map[string][]string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
}

func (o *GenerateimagefromAIResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *GenerateimagefromAIResponse) GetGenerateimagefromAI() *GenerateimagefromAIGenerateimagefromAI {
	if o == nil {
		return nil
	}
	return o.GenerateimagefromAI
}

func (o *GenerateimagefromAIResponse) GetHeaders() map[string][]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GenerateimagefromAIResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *GenerateimagefromAIResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}
