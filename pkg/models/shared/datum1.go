// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/taamai/pkg/utils"
)

type Folder struct {
	CreatedAt   *string `json:"created_at,omitempty"`
	DeletedAt   *string `json:"deleted_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	ID          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Status      *int    `json:"status,omitempty"`
	UpdatedAt   *string `json:"updated_at,omitempty"`
	UserID      *int    `json:"user_id,omitempty"`
	WorkbookID  *int    `json:"workbook_id,omitempty"`
}

func (o *Folder) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Folder) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Folder) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Folder) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *Folder) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Folder) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Folder) GetStatus() *int {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Folder) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Folder) GetUserID() *int {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *Folder) GetWorkbookID() *int {
	if o == nil {
		return nil
	}
	return o.WorkbookID
}

type FoldersType string

const (
	FoldersTypeFolder FoldersType = "Folder"
	FoldersTypeStr    FoldersType = "str"
)

type Folders struct {
	Folder *Folder
	Str    *string

	Type FoldersType
}

func CreateFoldersFolder(folder Folder) Folders {
	typ := FoldersTypeFolder

	return Folders{
		Folder: &folder,
		Type:   typ,
	}
}

func CreateFoldersStr(str string) Folders {
	typ := FoldersTypeStr

	return Folders{
		Str:  &str,
		Type: typ,
	}
}

func (u *Folders) UnmarshalJSON(data []byte) error {

	folder := Folder{}
	if err := utils.UnmarshalJSON(data, &folder, "", true, true); err == nil {
		u.Folder = &folder
		u.Type = FoldersTypeFolder
		return nil
	}

	str := ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = FoldersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Folders) MarshalJSON() ([]byte, error) {
	if u.Folder != nil {
		return utils.MarshalJSON(u.Folder, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Datum1 struct {
	CreatedAt string    `json:"created_at"`
	Default   int       `json:"default"`
	DeletedAt *string   `json:"deleted_at"`
	Folders   []Folders `json:"folders"`
	ID        int       `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt string    `json:"updated_at"`
	UserID    int       `json:"user_id"`
}

func (o *Datum1) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Datum1) GetDefault() int {
	if o == nil {
		return 0
	}
	return o.Default
}

func (o *Datum1) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Datum1) GetFolders() []Folders {
	if o == nil {
		return []Folders{}
	}
	return o.Folders
}

func (o *Datum1) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Datum1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Datum1) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Datum1) GetUserID() int {
	if o == nil {
		return 0
	}
	return o.UserID
}
