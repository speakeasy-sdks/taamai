// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"errors"
	"github.com/speakeasy-sdks/taamai/pkg/utils"
)

type Datum1FoldersFolder struct {
	CreatedAt   *string `json:"created_at,omitempty"`
	DeletedAt   *string `json:"deleted_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	ID          *int    `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Status      *int    `json:"status,omitempty"`
	UpdatedAt   *string `json:"updated_at,omitempty"`
	UserID      *int    `json:"user_id,omitempty"`
	WorkbookID  *int    `json:"workbook_id,omitempty"`
}

func (o *Datum1FoldersFolder) GetCreatedAt() *string {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Datum1FoldersFolder) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Datum1FoldersFolder) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Datum1FoldersFolder) GetIcon() *string {
	if o == nil {
		return nil
	}
	return o.Icon
}

func (o *Datum1FoldersFolder) GetID() *int {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Datum1FoldersFolder) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Datum1FoldersFolder) GetStatus() *int {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Datum1FoldersFolder) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Datum1FoldersFolder) GetUserID() *int {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *Datum1FoldersFolder) GetWorkbookID() *int {
	if o == nil {
		return nil
	}
	return o.WorkbookID
}

type Datum1FoldersType string

const (
	Datum1FoldersTypeDatum1FoldersFolder Datum1FoldersType = "Datum1_folders_Folder"
	Datum1FoldersTypeStr                 Datum1FoldersType = "str"
)

type Datum1Folders struct {
	Datum1FoldersFolder *Datum1FoldersFolder
	Str                 *string

	Type Datum1FoldersType
}

func CreateDatum1FoldersDatum1FoldersFolder(datum1FoldersFolder Datum1FoldersFolder) Datum1Folders {
	typ := Datum1FoldersTypeDatum1FoldersFolder

	return Datum1Folders{
		Datum1FoldersFolder: &datum1FoldersFolder,
		Type:                typ,
	}
}

func CreateDatum1FoldersStr(str string) Datum1Folders {
	typ := Datum1FoldersTypeStr

	return Datum1Folders{
		Str:  &str,
		Type: typ,
	}
}

func (u *Datum1Folders) UnmarshalJSON(data []byte) error {

	datum1FoldersFolder := new(Datum1FoldersFolder)
	if err := utils.UnmarshalJSON(data, &datum1FoldersFolder, "", true, true); err == nil {
		u.Datum1FoldersFolder = datum1FoldersFolder
		u.Type = Datum1FoldersTypeDatum1FoldersFolder
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = Datum1FoldersTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u Datum1Folders) MarshalJSON() ([]byte, error) {
	if u.Datum1FoldersFolder != nil {
		return utils.MarshalJSON(u.Datum1FoldersFolder, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type Datum1 struct {
	CreatedAt string          `json:"created_at"`
	Default   int             `json:"default"`
	DeletedAt *string         `json:"deleted_at"`
	Folders   []Datum1Folders `json:"folders"`
	ID        int             `json:"id"`
	Name      string          `json:"name"`
	UpdatedAt string          `json:"updated_at"`
	UserID    int             `json:"user_id"`
}

func (o *Datum1) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *Datum1) GetDefault() int {
	if o == nil {
		return 0
	}
	return o.Default
}

func (o *Datum1) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Datum1) GetFolders() []Datum1Folders {
	if o == nil {
		return []Datum1Folders{}
	}
	return o.Folders
}

func (o *Datum1) GetID() int {
	if o == nil {
		return 0
	}
	return o.ID
}

func (o *Datum1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Datum1) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Datum1) GetUserID() int {
	if o == nil {
		return 0
	}
	return o.UserID
}
